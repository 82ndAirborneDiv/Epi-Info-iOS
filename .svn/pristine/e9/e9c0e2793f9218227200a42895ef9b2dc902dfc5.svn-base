//
//  MeansCrosstabCompute.m
//  EpiInfo
//
//  Created by John Copeland on 9/11/14.
//  Copyright (c) 2014 John Copeland. All rights reserved.
//

#import "MeansCrosstabCompute.h"

@implementation MeansCrosstabCompute
+ (NSArray *)doT:(NSArray *)tInputs
{
    NSArray *tArray0 = (NSArray *)[tInputs objectAtIndex:0];
    NSArray *tArray1 = (NSArray *)[tInputs objectAtIndex:1];
    
    float satterwaiteDF = powf([(NSNumber *)[tArray0 objectAtIndex:3] floatValue] / [(NSNumber *)[tArray0 objectAtIndex:0] floatValue] +
                               [(NSNumber *)[tArray1 objectAtIndex:3] floatValue] / [(NSNumber *)[tArray1 objectAtIndex:0] floatValue],
                               2.0) /
    (1.0 / ([(NSNumber *)[tArray0 objectAtIndex:0] floatValue] - 1.0) *
     powf([(NSNumber *)[tArray0 objectAtIndex:3] floatValue] / [(NSNumber *)[tArray0 objectAtIndex:0] floatValue], 2.0) +
     1.0 / ([(NSNumber *)[tArray1 objectAtIndex:0] floatValue] - 1.0) *
     powf([(NSNumber *)[tArray1 objectAtIndex:3] floatValue] / [(NSNumber *)[tArray1 objectAtIndex:0] floatValue], 2.0));
    
    float seU = sqrtf([(NSNumber *)[tArray0 objectAtIndex:3] floatValue] / [(NSNumber *)[tArray0 objectAtIndex:0] floatValue] +
                      [(NSNumber *)[tArray1 objectAtIndex:3] floatValue] / [(NSNumber *)[tArray1 objectAtIndex:0] floatValue]);
    
    satterwaiteDF = powf(seU, 4.0) /
    (1.0 / ([(NSNumber *)[tArray0 objectAtIndex:0] floatValue] - 1.0) *
     powf([(NSNumber *)[tArray0 objectAtIndex:3] floatValue] / [(NSNumber *)[tArray0 objectAtIndex:0] floatValue], 2.0) +
     1.0 / ([(NSNumber *)[tArray1 objectAtIndex:0] floatValue] - 1.0) *
     powf([(NSNumber *)[tArray1 objectAtIndex:3] floatValue] / [(NSNumber *)[tArray1 objectAtIndex:0] floatValue], 2.0));
    
    float meansDiff = [(NSNumber *)[tArray0 objectAtIndex:2] floatValue] - [(NSNumber *)[tArray1 objectAtIndex:2] floatValue];
    
    float stdDevDiff = sqrtf((([(NSNumber *)[tArray0 objectAtIndex:0] floatValue] - 1.0) * [(NSNumber *)[tArray0 objectAtIndex:3] floatValue] +
                              ([(NSNumber *)[tArray1 objectAtIndex:0] floatValue] - 1.0) * [(NSNumber *)[tArray1 objectAtIndex:3] floatValue]) /
                             ([(NSNumber *)[tArray0 objectAtIndex:0] floatValue] + [(NSNumber *)[tArray1 objectAtIndex:0] floatValue] - 2.0));
    
    int df = (int)[(NSNumber *)[tArray0 objectAtIndex:0] floatValue] + (int)[(NSNumber *)[tArray1 objectAtIndex:0] floatValue] - 2;
    
    short shortDF = (short)df;
    
    float tProbability = 0.05;
    
    float intervalLength = [SharedResources TfromP:tProbability AndDF:shortDF] * stdDevDiff *
    sqrtf(1.0 / [(NSNumber *)[tArray0 objectAtIndex:0] floatValue] + 1.0 / [(NSNumber *)[tArray1 objectAtIndex:0] floatValue]);

    return @[[NSNumber numberWithFloat:satterwaiteDF],
             [NSNumber numberWithFloat:seU],
             [NSNumber numberWithFloat:meansDiff],
             [NSNumber numberWithFloat:stdDevDiff],
             [NSNumber numberWithFloat:intervalLength]
             ];
}
@end
